doctype html
html(lang='en')
head
    meta(name='viewport' content='width=device-width, initial-scale=1')
    style.
        * {
        box-sizing: border-box;
        }
        .float-container {
        border: 2px solid #fff;
        padding: 0px;
        }
        .float-child {
        width:  #{1.0/data.inst.num_cache*100}%;
        float: left;
        padding: 10px;
        border: 1px solid grey;
        }
        .float-child-highlight {
        width:  #{1.0/data.inst.num_cache*100}%;
        float: left;
        padding: 10px;
        border: 1px solid red;
        }
        .float-child-two-col {
        width:  50%;
        float: left;
        padding: 10px;
        border: none;
        }
        .float-child-two-third-col {
        width:  80%;
        float: left;
        padding: 10px;
        border: none;
        }
        .float-child-one-third-col {
        width:  20%;
        float: left;
        padding: 10px;
        border: none;
        }
        .float-child-six-col {
        width:  15.6666%;
        float: left;
        padding: 0px;
        border: none;
        }
        .item {
        grid-row: 1 / span 8;
        }
        table, th, td {
        border: 1px solid black;
        }
        td 
        {
            text-align: center; 
            vertical-align: middle;
            height: 50px; 
            width: 50px;
        }
        table{
        width: 100%
        }
        textarea{
            height: 100%;
            width: 100%;
            -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
            -moz-box-sizing: border-box;    /* Firefox, other Gecko */
            box-sizing: border-box;         /* Opera/IE 8+ */
        }
        search {
            width: 20em;  height: 2em;
        }
body
    h1 Cache Coherence Simulator
    form(action='/reset' method='post')
        input(type='submit' value='Reset' style='float: right; margin-right: 2.5em; height:40px; width:50pxl; background-color: #4CAF50;' )
    case data.inst.protocol_type
        when 'snp_msi'
            h3 Protocol: Snoop-based MSI (M-modifed | S-shared | I-invalid)
        when 'snp_mesi'
            h3 Protocol: Snoop-based MESI (M-modifed | E-exclusive | S-shared | I-invalid)
        when 'dir_msi'
            h3 Protocol: Directory-based MSI (M-modifed | S-shared | I-invalid)
        default
            h3 Protocol: Unknown
    .float-container
        .float-child-six-col
            case data.inst.cache_type
                when 'c'
                    h4 Cache configuration: Custom
                when 'd'
                    h4 Cache configuration: Direct
                when 'f'
                    h4 Cache configuration: Fully
                default 
                    h4 Cache configuration: Unknown
        .float-child-six-col
            h4 Number of nodes: #{data.inst.num_cache}
        .float-child-six-col
            h4 Cache Size (B): #{data.inst.cache_size}
        .float-child-six-col
            h4 Block Size (B): #{data.inst.line_size}
        .float-child-six-col
            h4 Memory Size (B): #{data.inst.mem_size}
        .float-child-six-col
            h4 Number of cache way: #{data.inst.cache_way}
    - var state_color = {'M':"background-color:yellow",'E': "background-color:green",'S': "background-color:lightblue",'I': "background-color:white"}
    .float-container
        if data.inst.protocol_type == 'dir_msi'
            - lineNum = data.inst.mem_size/data.inst.line_size
                if data.cache.cycle != undefined
                    h2(style="float: left;") Home Node (cycle: #{data.cache.cycle})
                else 
                    h2(style="float: left;") Home Node
                table
                    tbody
                    tr
                        - irow = 0;
                        - let state = "";
                        td State
                        while irow++ < lineNum
                            if data.cache.dir.dict[irow-1].protocol === undefined
                                - state = data.cache.dir.dict[irow-1].state
                            else 
                                - state = data.cache.dir.dict[irow-1].protocol
                            td(style=state_color[state]) #{state}
                    tr
                        - var irow = 0;
                        td Addr
                        while irow++ < lineNum
                            if data.cache.dir.dict[irow-1].protocol === undefined
                                - state = data.cache.dir.dict[irow-1].state
                            else 
                                - state = data.cache.dir.dict[irow-1].protocol
                            td(style=state_color[state]) #{data.cache.dir.dict[irow-1].addr}
    - var lineNum = data.inst.cache_size/data.inst.line_size
    - var ncol = 0;
    - var step_url = "";
    - var all_finish_status = false;
    - var finished_node_num = 0;
    - var ii = 0
    while ii++ < data.inst.num_cache
        - let node_id = 'node_'+(ii-1)
        if (data.cache[ii-1].PC >= data.inst[node_id].length || (data.inst[node_id].length==1 && data.inst[node_id][0][0]=="")) && finished_node_num++
    if finished_node_num == data.inst.num_cache 
        - all_finish_status = true
    if data.inst.reset == 0
        - step_url = "/instruction"
    else 
        - step_url = "/step"
    form(action = step_url method='post')
        .float-container
        while ncol++ < data.inst.num_cache
            - let node_id = 'node_'+(ncol-1)
            if data.inst.protocol_type == 'dir_msi'
            .float-child
                if data.inst.run_node == 'all' || data.inst.run_node == ncol-1
                    h2(style="float: left;color:red") Node #{ncol-1} (active)
                else
                    h2(style="float: left;") Node #{ncol-1}

                table
                    tbody
                    tr
                        - var irow = 0;
                        - let state = ""
                        td State
                        while irow++ < lineNum
                            if data.cache[ncol-1].cache[irow-1].protocol === undefined
                                - state = data.cache[ncol-1].cache[irow-1].state
                            else 
                                - state = data.cache[ncol-1].cache[irow-1].protocol
                            td(style=state_color[state]) #{state}
                    tr
                        - var irow = 0;
                        td Addr
                        while irow++ < lineNum
                            if data.cache[ncol-1].cache[irow-1].protocol === undefined
                                - state = data.cache[ncol-1].cache[irow-1].state
                            else 
                                - state = data.cache[ncol-1].cache[irow-1].protocol
                            td(style=state_color[state]) #{data.cache[ncol-1].cache[irow-1].addr}
                h3 Instructions
                if data.inst.reset == 0
                    label(for='instr') 
                    textarea#instr(name='instr' rows='8')
                else
                    - var p_count = data.cache[ncol-1].PC
                    if p_count  == 0
                        p(style="background-color:silver; color:black") Previous: start
                        if p_count+1 <= data.inst[node_id].length && data.inst[node_id][p_count][0] != ""
                            p &nbsp&nbsp&nbsp&nbsp&nbsp Next: #{data.inst[node_id][p_count][0]} #{data.inst[node_id][p_count][1]}
                        else 
                            p &nbsp&nbsp&nbsp&nbsp&nbsp Next: end
                    else if p_count > data.inst[node_id].length
                        - let code_len = data.inst[node_id].length
                        p(style="background-color:silver; color:black") Previous: #{data.inst[node_id][code_len-1][0]} #{data.inst[node_id][code_len-1][1]}
                        p &nbsp&nbsp&nbsp&nbsp&nbsp Next: end
                    else
                        p(style="background-color:silver; color:black") Previous: #{data.inst[node_id][p_count-1][0]} #{data.inst[node_id][p_count-1][1]}
                        if p_count+1 <= data.inst[node_id].length && data.inst[node_id][p_count][0] != ""
                            p &nbsp&nbsp&nbsp&nbsp&nbsp Next: #{data.inst[node_id][p_count][0]} #{data.inst[node_id][p_count][1]}
                        else 
                            p &nbsp&nbsp&nbsp&nbsp&nbsp Next: end
        .float-container
            .float-child-two-third-col
                h3 Message:
                if data.inst.protocol_type == 'dir_msi' && data.inst.reset == 1
                    td &nbsp &nbsp &nbsp&nbsp&nbsp &nbsp &nbsp&nbsp&nbsp &nbsp &nbsp Home_node:
                        td &nbsp #{data.cache.dir.msg}
                    br
                    - let i = 0
                    while i++ < data.inst.num_cache 
                        td &nbsp &nbsp &nbsp&nbsp&nbsp &nbsp &nbsp&nbsp&nbsp &nbsp &nbsp&nbsp&nbsp &nbsp &nbsp&nbsp Node_#{i-1}:
                            td &nbsp #{data.cache[i-1].log}
                        br
                    td Interconnet transactions:
                        td #{data.cache.msg}
                    br
            .float-child-one-third-col
                if all_finish_status == false
                    label(for='run_node') 
                        h4(style='text-align: right; margin-right: 2.5em;') Run:&nbsp
                            - let itr = 0
                            select#run_node(name='run_node')
                                while itr++ < data.inst.num_cache
                                    - let node_id = 'node_'+(itr-1)
                                    if data.inst.reset == 0 || data.cache[itr-1].PC < data.inst[node_id].length
                                        if data.inst.run_node == (itr-1)
                                            option(value= (itr-1) selected) Node #{itr-1}
                                        else if !(data.inst[node_id].length == 1 && data.inst[node_id][0][0] == "")
                                            option(value= (itr-1)) Node #{itr-1}
                                if data.inst.protocol_type == 'dir_msi' && finished_node_num < data.inst.num_cache-1
                                    if data.inst.run_node == 'all'
                                        option(value= 'all' selected) All nodes
                                    else 
                                        option(value= 'all') All nodes
                    input(type='hidden' name='data' value=data)
                    if data.inst.reset == 0
                        input(type='submit' value='Submit' style='float: right; margin-right: 2.5em;height:40px; width:80px; background-color: lightblue;')
                    else 
                        input(type='submit' value='Step' style='float: right; margin-right: 2.5em;height:40px; width:50px; background-color: lightblue;')
                else 
                    h4(style='text-align: right; margin-right: 2.5em;') Simulation has finished!
