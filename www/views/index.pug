doctype html
head
    meta(name='viewport' content='width=device-width, initial-scale=1')
    style.
        * {
        box-sizing: border-box;
        }
        .float-container {
        border: 2px solid #fff;
        padding: 0px;
        }
        .float-child {
        width:  #{1.0/data.inst.num_cache*100}%;
        float: left;
        padding: 10px;
        border: 1px solid grey;
        }
        .float-child-two-col {
        width:  50%;
        float: left;
        padding: 10px;
        border: none;
        }
        .float-child-six-col {
        width:  15.6666%;
        float: left;
        padding: 0px;
        border: none;
        }
        .item {
        grid-row: 1 / span 8;
        }
        table, th, td {
        border: 1px solid black;
        }
        td 
        {
            text-align: center; 
            vertical-align: middle;
            height: 50px; 
            width: 50px;
        }
        table{
        width: 100%
        }
        textarea{
            height: 100%;
            width: 100%;
            -webkit-box-sizing: border-box; /* Safari/Chrome, other WebKit */
            -moz-box-sizing: border-box;    /* Firefox, other Gecko */
            box-sizing: border-box;         /* Opera/IE 8+ */
        }
        search {
            width: 20em;  height: 2em;
        }
body
    h2 Cache Coherence Simulator
    form(action='/reset' method='post')
        input(type='submit' value='Reset' style='float: right; margin-right: 2.5em; height:40px; width:50pxl; background-color: #4CAF50;' )
    case data.inst.protocol_type
        when 'snp_msi'
            h4 Protocol: Snoop-based MSI (M-modifed | S-shared | I-invalid)
        when 'snp_mesi'
            h4 Protocol: Snoop-based MESI (M-modifed | E-exclusive | S-shared | I-invalid)
        when 'dir_msi'
            h4 Protocol: Directory-based MSI (M-modifed | S-shared | I-invalid)
        default
            h4 Protocol: Unknown
    .float-container
        .float-child-six-col
            case data.inst.cache_type
                when 'c'
                    h4 Cache configuration: Custom
                when 'd'
                    h4 Cache configuration: Direct
                when 'f'
                    h4 Cache configuration: Fully
                default 
                    h4 Cache configuration: Unknown
        .float-child-six-col
            h4 Number of nodes: #{data.inst.num_cache}
        .float-child-six-col
            h4 Cache Size (B): #{data.inst.cache_size}
        .float-child-six-col
            h4 Block Size (B): #{data.inst.line_size}
        .float-child-six-col
            h4 Memory Size (B): #{data.inst.mem_size}
        .float-child-six-col
            h4 Number of cache way: #{data.inst.cache_way}
    .float-container
        if data.inst.protocol_type = 'dir_msi'
            - lineNum = data.inst.mem_size/data.inst.line_size

                    h2(style="float: left;") Home Node
                    table
                        tbody
                        tr
                            - irow = 0;
                            td State
                            while irow++ < lineNum
                                if data.cache.dir.dict[irow-1].protocol === undefined
                                    td #{data.cache.dir.dict[irow-1].state}
                                else 
                                    td #{data.cache.dir.dict[irow-1].protocol}
                        tr
                            - var irow = 0;
                            td Addr
                            while irow++ < lineNum
                                td #{data.cache.dir.dict[irow-1].addr}
    - var lineNum = data.inst.cache_size/data.inst.line_size
    - var ncol = 0;
    - var step_url = "";
    if data.inst.reset == 0
        - step_url = "/instruction"
    else 
        - step_url = "/step"
    form(action = step_url method='post')
        .float-container
        while ncol++ < data.inst.num_cache
            - var node_id = 'node_'+(ncol-1)
            .float-child
                h2(style="float: left;") Node #{ncol}
                p(style="float: right;") # Hits: 0 &nbsp &nbsp # Misses: 0 &nbsp &nbsp
                table
                    tbody
                    tr
                        - var irow = 0;
                        td State
                        while irow++ < lineNum
                            if data.cache[ncol-1].cache[irow-1].protocol === undefined
                                td #{data.cache[ncol-1].cache[irow-1].state}
                            else 
                                td #{data.cache[ncol-1].cache[irow-1].protocol}
                    tr
                        - var irow = 0;
                        td Addr
                        while irow++ < lineNum
                            td #{data.cache[ncol-1].cache[irow-1].addr}
                h4 Instructions
                if data.inst.reset == 0
                    label(for='instr') 
                    textarea#instr(name='instr' rows='8')
                else
                    - var p_count = data.cache[icol-1]
                    p #{data.inst[node_id][ncol-1][0]} #{data.inst[node_id][ncol-1][1]}
        h6 &nbsp
        label(for='run_node') 
            h4(style='text-align: right; margin-right: 2.5em;') Run:&nbsp
                - var itr = 0
                select#run_node(name='run_node')
                    while itr++ < data.inst.num_cache
                        if data.inst.run_node == (itr-1)
                            option(value= (itr-1) selected) node_#{itr}
                        else
                            option(value= (itr-1)) node_#{itr}         
        input(type='hidden' name='data' value=data)
        if data.inst.reset == 0
            input(type='submit' value='Submit' style='float: right; margin-right: 2.5em;height:40px; width:80px; background-color: lightblue;')
        else 
            input(type='submit' value='Step' style='float: right; margin-right: 2.5em;height:40px; width:50px; background-color: lightblue;')
